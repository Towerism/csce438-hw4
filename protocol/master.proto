// Master Socket protocol 
syntax = "proto3";

package hw2;

service MasterServer{
	rpc ConnectionPoint(Empty) returns (ConnectionReply) {}
	// Give master update on how many clients connected
		// Can return Empty since don't need anything from master
		//     and if master crashes, replacement will be on same port
	rpc UpdateClientInfo(WorkerInfo) returns(Empty) {}
	rpc MasterWorkerCommunication(stream ServerInfo) returns(stream MasterInfo){}
	rpc MasterMasterCommunication(stream Empty) returns(stream Empty){}
	rpc MasterMasterChat( MasterChat) returns(MasterChat){}
}
message ConnectionReply{
	string location = 1;
}
message Empty{

}
message WorkerInfo{
	string host =1;
	int32 port =2;
	int32 client_count =3;
	int32 client_port =4;
	bool previously_connected = 5;
}
message ServerInfo{
	enum Action{
		REGISTER = 0;
		UPDATE_CLIENT = 1;
		WORKER_DOWN = 2;
	}
	Action message_type = 1;
	WorkerInfo worker = 2;
}
message MasterInfo{
	enum Action{
		UPDATE_WORKER = 0; 
		// When client receives update, add to backups if host not allocated yet.
		REMOVE_SERVER = 1;
		SPAWN_CLONE = 2;
	}
	Action message_type = 1;
	WorkerInfo worker= 2;
}
message MasterChat{
	int32 spawnid = 1;
	bool replicate = 2;
}
